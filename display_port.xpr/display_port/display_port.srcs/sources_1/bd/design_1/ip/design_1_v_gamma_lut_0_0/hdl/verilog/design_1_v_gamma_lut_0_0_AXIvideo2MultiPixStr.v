// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module design_1_v_gamma_lut_0_0_AXIvideo2MultiPixStr (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        s_axis_video_TDATA,
        s_axis_video_TVALID,
        s_axis_video_TREADY,
        s_axis_video_TKEEP,
        s_axis_video_TSTRB,
        s_axis_video_TUSER,
        s_axis_video_TLAST,
        s_axis_video_TID,
        s_axis_video_TDEST,
        img_V_val_0_V_din,
        img_V_val_0_V_full_n,
        img_V_val_0_V_write,
        img_V_val_1_V_din,
        img_V_val_1_V_full_n,
        img_V_val_1_V_write,
        img_V_val_2_V_din,
        img_V_val_2_V_full_n,
        img_V_val_2_V_write,
        Height,
        WidthIn
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_pp1_stage0 = 9'd32;
parameter    ap_ST_fsm_state8 = 9'd64;
parameter    ap_ST_fsm_state9 = 9'd128;
parameter    ap_ST_fsm_state10 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] s_axis_video_TDATA;
input   s_axis_video_TVALID;
output   s_axis_video_TREADY;
input  [3:0] s_axis_video_TKEEP;
input  [3:0] s_axis_video_TSTRB;
input  [0:0] s_axis_video_TUSER;
input  [0:0] s_axis_video_TLAST;
input  [0:0] s_axis_video_TID;
input  [0:0] s_axis_video_TDEST;
output  [9:0] img_V_val_0_V_din;
input   img_V_val_0_V_full_n;
output   img_V_val_0_V_write;
output  [9:0] img_V_val_1_V_din;
input   img_V_val_1_V_full_n;
output   img_V_val_1_V_write;
output  [9:0] img_V_val_2_V_din;
input   img_V_val_2_V_full_n;
output   img_V_val_2_V_write;
input  [15:0] Height;
input  [15:0] WidthIn;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg s_axis_video_TREADY;
reg img_V_val_0_V_write;
reg img_V_val_1_V_write;
reg img_V_val_2_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    s_axis_video_TDATA_blk_n;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp1_stage0;
wire   [0:0] icmp_ln121_fu_354_p2;
wire   [0:0] or_ln125_fu_368_p2;
wire    ap_CS_fsm_state9;
wire   [0:0] ap_phi_mux_eol_2_phi_fu_303_p4;
reg    img_V_val_0_V_blk_n;
reg    ap_enable_reg_pp1_iter1;
reg   [0:0] icmp_ln121_reg_466;
reg    img_V_val_1_V_blk_n;
reg    img_V_val_2_V_blk_n;
reg   [0:0] eol_reg_206;
reg   [29:0] axi_data_V_1_reg_217;
reg   [0:0] eol_0_reg_228;
reg   [15:0] j_0_reg_240;
reg   [0:0] axi_last_V_2_reg_251;
reg   [29:0] p_Val2_s_reg_264;
reg    ap_block_state1;
wire   [15:0] grp_reg_unsigned_short_s_fu_319_ap_return;
reg   [15:0] tmp_reg_422;
wire    ap_CS_fsm_state2;
wire    grp_reg_unsigned_short_s_fu_319_ap_ready;
wire    grp_reg_unsigned_short_s_fu_319_ap_done;
wire    grp_reg_unsigned_short_s_fu_325_ap_ready;
wire    grp_reg_unsigned_short_s_fu_325_ap_done;
reg    ap_block_state2_on_subcall_done;
wire   [15:0] grp_reg_unsigned_short_s_fu_325_ap_return;
reg   [15:0] tmp_3_reg_427;
reg   [31:0] tmp_data_V_cast_reg_432;
reg   [0:0] tmp_last_V_reg_440;
wire   [29:0] tmp_data_V_fu_335_p1;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln118_fu_343_p2;
wire    ap_CS_fsm_state5;
wire   [15:0] i_fu_348_p2;
reg   [15:0] i_reg_461;
reg    ap_predicate_op58_read_state6;
reg    ap_block_state6_pp1_stage0_iter0;
wire    io_acc_block_signal_op72;
reg    ap_block_state7_pp1_stage0_iter1;
reg    ap_block_pp1_stage0_11001;
wire   [15:0] j_fu_359_p2;
wire   [9:0] tmp_val_0_V_fu_379_p1;
reg   [9:0] tmp_val_0_V_reg_479;
reg   [9:0] tmp_val_1_V_reg_484;
reg   [9:0] tmp_val_2_V_reg_489;
reg    ap_block_state9;
wire   [29:0] tmp_data_V_2_fu_408_p1;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state6;
wire    grp_reg_unsigned_short_s_fu_319_ap_start;
wire    grp_reg_unsigned_short_s_fu_319_ap_idle;
wire    grp_reg_unsigned_short_s_fu_325_ap_start;
wire    grp_reg_unsigned_short_s_fu_325_ap_idle;
reg   [0:0] axi_last_V_3_reg_276;
reg   [0:0] axi_last_V_0_reg_175;
wire    ap_CS_fsm_state10;
reg   [29:0] axi_data_V_3_reg_288;
reg   [29:0] axi_data_V_0_reg_185;
reg   [15:0] i_0_reg_195;
reg   [0:0] ap_phi_mux_eol_phi_fu_209_p4;
reg   [29:0] ap_phi_mux_axi_data_V_1_phi_fu_220_p4;
reg   [0:0] ap_phi_mux_eol_0_phi_fu_232_p4;
wire   [0:0] ap_phi_reg_pp1_iter0_axi_last_V_2_reg_251;
reg   [29:0] ap_phi_mux_p_Val2_s_phi_fu_268_p4;
wire   [29:0] tmp_data_V_1_fu_374_p1;
wire   [29:0] ap_phi_reg_pp1_iter0_p_Val2_s_reg_264;
wire    ap_CS_fsm_state8;
reg   [0:0] eol_2_reg_300;
reg    grp_reg_unsigned_short_s_fu_319_ap_start_reg;
reg    ap_block_state1_ignore_call6;
reg    grp_reg_unsigned_short_s_fu_325_ap_start_reg;
reg    ap_block_state1_ignore_call7;
reg   [0:0] sof_1_fu_128;
reg    ap_block_pp1_stage0_01001;
wire   [0:0] tmp_user_V_fu_331_p1;
reg   [8:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    regslice_both_AXI_video_strm_V_data_V_U_apdone_blk;
wire   [31:0] s_axis_video_TDATA_int;
wire    s_axis_video_TVALID_int;
reg    s_axis_video_TREADY_int;
wire    regslice_both_AXI_video_strm_V_data_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_keep_V_U_apdone_blk;
wire   [3:0] s_axis_video_TKEEP_int;
wire    regslice_both_AXI_video_strm_V_keep_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_keep_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_strb_V_U_apdone_blk;
wire   [3:0] s_axis_video_TSTRB_int;
wire    regslice_both_AXI_video_strm_V_strb_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_strb_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_user_V_U_apdone_blk;
wire   [0:0] s_axis_video_TUSER_int;
wire    regslice_both_AXI_video_strm_V_user_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_user_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_last_V_U_apdone_blk;
wire   [0:0] s_axis_video_TLAST_int;
wire    regslice_both_AXI_video_strm_V_last_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_last_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_id_V_U_apdone_blk;
wire   [0:0] s_axis_video_TID_int;
wire    regslice_both_AXI_video_strm_V_id_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_id_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_dest_V_U_apdone_blk;
wire   [0:0] s_axis_video_TDEST_int;
wire    regslice_both_AXI_video_strm_V_dest_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_dest_V_U_ack_in;
reg    ap_condition_182;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 grp_reg_unsigned_short_s_fu_319_ap_start_reg = 1'b0;
#0 grp_reg_unsigned_short_s_fu_325_ap_start_reg = 1'b0;
end

design_1_v_gamma_lut_0_0_reg_unsigned_short_s grp_reg_unsigned_short_s_fu_319(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reg_unsigned_short_s_fu_319_ap_start),
    .ap_done(grp_reg_unsigned_short_s_fu_319_ap_done),
    .ap_idle(grp_reg_unsigned_short_s_fu_319_ap_idle),
    .ap_ready(grp_reg_unsigned_short_s_fu_319_ap_ready),
    .in_r(Height),
    .ap_return(grp_reg_unsigned_short_s_fu_319_ap_return)
);

design_1_v_gamma_lut_0_0_reg_unsigned_short_s grp_reg_unsigned_short_s_fu_325(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reg_unsigned_short_s_fu_325_ap_start),
    .ap_done(grp_reg_unsigned_short_s_fu_325_ap_done),
    .ap_idle(grp_reg_unsigned_short_s_fu_325_ap_idle),
    .ap_ready(grp_reg_unsigned_short_s_fu_325_ap_ready),
    .in_r(WidthIn),
    .ap_return(grp_reg_unsigned_short_s_fu_325_ap_return)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_AXI_video_strm_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_video_TDATA),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_data_V_U_ack_in),
    .data_out(s_axis_video_TDATA_int),
    .vld_out(s_axis_video_TVALID_int),
    .ack_out(s_axis_video_TREADY_int),
    .apdone_blk(regslice_both_AXI_video_strm_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 4 ))
regslice_both_AXI_video_strm_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_video_TKEEP),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_keep_V_U_ack_in),
    .data_out(s_axis_video_TKEEP_int),
    .vld_out(regslice_both_AXI_video_strm_V_keep_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int),
    .apdone_blk(regslice_both_AXI_video_strm_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 4 ))
regslice_both_AXI_video_strm_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_video_TSTRB),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_strb_V_U_ack_in),
    .data_out(s_axis_video_TSTRB_int),
    .vld_out(regslice_both_AXI_video_strm_V_strb_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int),
    .apdone_blk(regslice_both_AXI_video_strm_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_video_TUSER),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_user_V_U_ack_in),
    .data_out(s_axis_video_TUSER_int),
    .vld_out(regslice_both_AXI_video_strm_V_user_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int),
    .apdone_blk(regslice_both_AXI_video_strm_V_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_video_TLAST),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_last_V_U_ack_in),
    .data_out(s_axis_video_TLAST_int),
    .vld_out(regslice_both_AXI_video_strm_V_last_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int),
    .apdone_blk(regslice_both_AXI_video_strm_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_video_TID),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_id_V_U_ack_in),
    .data_out(s_axis_video_TID_int),
    .vld_out(regslice_both_AXI_video_strm_V_id_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int),
    .apdone_blk(regslice_both_AXI_video_strm_V_id_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_video_TDEST),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_dest_V_U_ack_in),
    .data_out(s_axis_video_TDEST_int),
    .vld_out(regslice_both_AXI_video_strm_V_dest_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int),
    .apdone_blk(regslice_both_AXI_video_strm_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln118_fu_343_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state6))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((icmp_ln118_fu_343_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state6))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state6);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((icmp_ln118_fu_343_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reg_unsigned_short_s_fu_319_ap_start_reg <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_reg_unsigned_short_s_fu_319_ap_start_reg <= 1'b1;
        end else if ((grp_reg_unsigned_short_s_fu_319_ap_ready == 1'b1)) begin
            grp_reg_unsigned_short_s_fu_319_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reg_unsigned_short_s_fu_325_ap_start_reg <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_reg_unsigned_short_s_fu_325_ap_start_reg <= 1'b1;
        end else if ((grp_reg_unsigned_short_s_fu_325_ap_ready == 1'b1)) begin
            grp_reg_unsigned_short_s_fu_325_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        axi_data_V_0_reg_185 <= tmp_data_V_fu_335_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        axi_data_V_0_reg_185 <= axi_data_V_3_reg_288;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_reg_466 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        axi_data_V_1_reg_217 <= p_Val2_s_reg_264;
    end else if (((icmp_ln118_fu_343_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        axi_data_V_1_reg_217 <= axi_data_V_0_reg_185;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        axi_data_V_3_reg_288 <= axi_data_V_1_reg_217;
    end else if ((~((eol_2_reg_300 == 1'd0) & (s_axis_video_TVALID_int == 1'b0)) & (eol_2_reg_300 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        axi_data_V_3_reg_288 <= tmp_data_V_2_fu_408_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        axi_last_V_0_reg_175 <= tmp_last_V_reg_440;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        axi_last_V_0_reg_175 <= axi_last_V_3_reg_276;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_182)) begin
        if (((or_ln125_fu_368_p2 == 1'd1) & (icmp_ln121_fu_354_p2 == 1'd0))) begin
            axi_last_V_2_reg_251 <= ap_phi_mux_eol_phi_fu_209_p4;
        end else if (((or_ln125_fu_368_p2 == 1'd0) & (icmp_ln121_fu_354_p2 == 1'd0))) begin
            axi_last_V_2_reg_251 <= s_axis_video_TLAST_int;
        end else if ((1'b1 == 1'b1)) begin
            axi_last_V_2_reg_251 <= ap_phi_reg_pp1_iter0_axi_last_V_2_reg_251;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        axi_last_V_3_reg_276 <= eol_reg_206;
    end else if ((~((eol_2_reg_300 == 1'd0) & (s_axis_video_TVALID_int == 1'b0)) & (eol_2_reg_300 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        axi_last_V_3_reg_276 <= s_axis_video_TLAST_int;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_reg_466 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        eol_0_reg_228 <= axi_last_V_2_reg_251;
    end else if (((icmp_ln118_fu_343_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        eol_0_reg_228 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        eol_2_reg_300 <= eol_0_reg_228;
    end else if ((~((eol_2_reg_300 == 1'd0) & (s_axis_video_TVALID_int == 1'b0)) & (eol_2_reg_300 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        eol_2_reg_300 <= s_axis_video_TLAST_int;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_reg_466 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        eol_reg_206 <= axi_last_V_2_reg_251;
    end else if (((icmp_ln118_fu_343_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        eol_reg_206 <= axi_last_V_0_reg_175;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_0_reg_195 <= 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        i_0_reg_195 <= i_reg_461;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_fu_354_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        j_0_reg_240 <= j_fu_359_p2;
    end else if (((icmp_ln118_fu_343_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        j_0_reg_240 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_182)) begin
        if (((or_ln125_fu_368_p2 == 1'd1) & (icmp_ln121_fu_354_p2 == 1'd0))) begin
            p_Val2_s_reg_264 <= ap_phi_mux_axi_data_V_1_phi_fu_220_p4;
        end else if (((or_ln125_fu_368_p2 == 1'd0) & (icmp_ln121_fu_354_p2 == 1'd0))) begin
            p_Val2_s_reg_264 <= tmp_data_V_1_fu_374_p1;
        end else if ((1'b1 == 1'b1)) begin
            p_Val2_s_reg_264 <= ap_phi_reg_pp1_iter0_p_Val2_s_reg_264;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_fu_354_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        sof_1_fu_128 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sof_1_fu_128 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_reg_461 <= i_fu_348_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln121_reg_466 <= icmp_ln121_fu_354_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        tmp_3_reg_427 <= grp_reg_unsigned_short_s_fu_325_ap_return;
        tmp_reg_422 <= grp_reg_unsigned_short_s_fu_319_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((s_axis_video_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_data_V_cast_reg_432 <= s_axis_video_TDATA_int;
        tmp_last_V_reg_440 <= s_axis_video_TLAST_int;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_fu_354_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        tmp_val_0_V_reg_479 <= tmp_val_0_V_fu_379_p1;
        tmp_val_1_V_reg_484 <= {{ap_phi_mux_p_Val2_s_phi_fu_268_p4[19:10]}};
        tmp_val_2_V_reg_489 <= {{ap_phi_mux_p_Val2_s_phi_fu_268_p4[29:20]}};
    end
end

always @ (*) begin
    if ((icmp_ln121_fu_354_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state6 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln118_fu_343_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln121_reg_466 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_axi_data_V_1_phi_fu_220_p4 = p_Val2_s_reg_264;
    end else begin
        ap_phi_mux_axi_data_V_1_phi_fu_220_p4 = axi_data_V_1_reg_217;
    end
end

always @ (*) begin
    if (((icmp_ln121_reg_466 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_eol_0_phi_fu_232_p4 = axi_last_V_2_reg_251;
    end else begin
        ap_phi_mux_eol_0_phi_fu_232_p4 = eol_0_reg_228;
    end
end

always @ (*) begin
    if (((icmp_ln121_reg_466 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_eol_phi_fu_209_p4 = axi_last_V_2_reg_251;
    end else begin
        ap_phi_mux_eol_phi_fu_209_p4 = eol_reg_206;
    end
end

always @ (*) begin
    if ((icmp_ln121_fu_354_p2 == 1'd0)) begin
        if ((or_ln125_fu_368_p2 == 1'd1)) begin
            ap_phi_mux_p_Val2_s_phi_fu_268_p4 = ap_phi_mux_axi_data_V_1_phi_fu_220_p4;
        end else if ((or_ln125_fu_368_p2 == 1'd0)) begin
            ap_phi_mux_p_Val2_s_phi_fu_268_p4 = tmp_data_V_1_fu_374_p1;
        end else begin
            ap_phi_mux_p_Val2_s_phi_fu_268_p4 = ap_phi_reg_pp1_iter0_p_Val2_s_reg_264;
        end
    end else begin
        ap_phi_mux_p_Val2_s_phi_fu_268_p4 = ap_phi_reg_pp1_iter0_p_Val2_s_reg_264;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln118_fu_343_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln121_reg_466 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        img_V_val_0_V_blk_n = img_V_val_0_V_full_n;
    end else begin
        img_V_val_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln121_reg_466 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        img_V_val_0_V_write = 1'b1;
    end else begin
        img_V_val_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln121_reg_466 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        img_V_val_1_V_blk_n = img_V_val_1_V_full_n;
    end else begin
        img_V_val_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln121_reg_466 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        img_V_val_1_V_write = 1'b1;
    end else begin
        img_V_val_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln121_reg_466 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        img_V_val_2_V_blk_n = img_V_val_2_V_full_n;
    end else begin
        img_V_val_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln121_reg_466 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        img_V_val_2_V_write = 1'b1;
    end else begin
        img_V_val_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((eol_2_reg_300 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((or_ln125_fu_368_p2 == 1'd0) & (icmp_ln121_fu_354_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        s_axis_video_TDATA_blk_n = s_axis_video_TVALID_int;
    end else begin
        s_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_AXI_video_strm_V_data_V_U_ack_in == 1'b1) & (s_axis_video_TVALID == 1'b1))) begin
        s_axis_video_TREADY = 1'b1;
    end else begin
        s_axis_video_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((~((eol_2_reg_300 == 1'd0) & (s_axis_video_TVALID_int == 1'b0)) & (eol_2_reg_300 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((ap_predicate_op58_read_state6 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((s_axis_video_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        s_axis_video_TREADY_int = 1'b1;
    end else begin
        s_axis_video_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_user_V_fu_331_p1 == 1'd0) & (s_axis_video_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if (((s_axis_video_TVALID_int == 1'b1) & (tmp_user_V_fu_331_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln118_fu_343_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((icmp_ln121_fu_354_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((icmp_ln121_fu_354_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if ((~((eol_2_reg_300 == 1'd0) & (s_axis_video_TVALID_int == 1'b0)) & (eol_2_reg_300 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else if ((~((eol_2_reg_300 == 1'd0) & (s_axis_video_TVALID_int == 1'b0)) & (ap_phi_mux_eol_2_phi_fu_303_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = (((icmp_ln121_reg_466 == 1'd0) & (io_acc_block_signal_op72 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((s_axis_video_TVALID_int == 1'b0) & (ap_predicate_op58_read_state6 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((icmp_ln121_reg_466 == 1'd0) & (io_acc_block_signal_op72 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((s_axis_video_TVALID_int == 1'b0) & (ap_predicate_op58_read_state6 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((icmp_ln121_reg_466 == 1'd0) & (io_acc_block_signal_op72 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((s_axis_video_TVALID_int == 1'b0) & (ap_predicate_op58_read_state6 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call6 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call7 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_on_subcall_done = ((grp_reg_unsigned_short_s_fu_325_ap_done == 1'b0) | (grp_reg_unsigned_short_s_fu_319_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state6_pp1_stage0_iter0 = ((s_axis_video_TVALID_int == 1'b0) & (ap_predicate_op58_read_state6 == 1'b1));
end

always @ (*) begin
    ap_block_state7_pp1_stage0_iter1 = ((icmp_ln121_reg_466 == 1'd0) & (io_acc_block_signal_op72 == 1'b0));
end

always @ (*) begin
    ap_block_state9 = ((eol_2_reg_300 == 1'd0) & (s_axis_video_TVALID_int == 1'b0));
end

always @ (*) begin
    ap_condition_182 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001));
end

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_phi_mux_eol_2_phi_fu_303_p4 = eol_2_reg_300;

assign ap_phi_reg_pp1_iter0_axi_last_V_2_reg_251 = 'bx;

assign ap_phi_reg_pp1_iter0_p_Val2_s_reg_264 = 'bx;

always @ (*) begin
    ap_predicate_op58_read_state6 = ((or_ln125_fu_368_p2 == 1'd0) & (icmp_ln121_fu_354_p2 == 1'd0));
end

assign grp_reg_unsigned_short_s_fu_319_ap_start = grp_reg_unsigned_short_s_fu_319_ap_start_reg;

assign grp_reg_unsigned_short_s_fu_325_ap_start = grp_reg_unsigned_short_s_fu_325_ap_start_reg;

assign i_fu_348_p2 = (i_0_reg_195 + 16'd1);

assign icmp_ln118_fu_343_p2 = ((i_0_reg_195 == tmp_reg_422) ? 1'b1 : 1'b0);

assign icmp_ln121_fu_354_p2 = ((j_0_reg_240 == tmp_3_reg_427) ? 1'b1 : 1'b0);

assign img_V_val_0_V_din = tmp_val_0_V_reg_479;

assign img_V_val_1_V_din = tmp_val_1_V_reg_484;

assign img_V_val_2_V_din = tmp_val_2_V_reg_489;

assign io_acc_block_signal_op72 = (img_V_val_2_V_full_n & img_V_val_1_V_full_n & img_V_val_0_V_full_n);

assign j_fu_359_p2 = (j_0_reg_240 + 16'd1);

assign or_ln125_fu_368_p2 = (sof_1_fu_128 | ap_phi_mux_eol_0_phi_fu_232_p4);

assign tmp_data_V_1_fu_374_p1 = s_axis_video_TDATA_int[29:0];

assign tmp_data_V_2_fu_408_p1 = s_axis_video_TDATA_int[29:0];

assign tmp_data_V_fu_335_p1 = tmp_data_V_cast_reg_432[29:0];

assign tmp_user_V_fu_331_p1 = s_axis_video_TUSER_int;

assign tmp_val_0_V_fu_379_p1 = ap_phi_mux_p_Val2_s_phi_fu_268_p4[9:0];

endmodule //design_1_v_gamma_lut_0_0_AXIvideo2MultiPixStr
